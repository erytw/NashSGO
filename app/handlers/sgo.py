import logging
from app.services.SGOUser import get_sgo_user
from app.sgo.data_wrapper import NetschoolCollector
from app.dao.holder import HolderDao
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, Text
from aiogram import Dispatcher, Router
import app.handlers.keyboards as kb


logger = logging.getLogger(__name__)
collector = NetschoolCollector()


class SGOInterface(StatesGroup):
    registration = State()
    choosing_login = State()
    choosing_password = State()
    choosing_school = State()
    save_to_db = State()
    main_menu = State()


async def registration(message: Message, state: FSMContext):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:\n(`–ú–ë–û–£ \"–°—Ä–µ–¥–Ω—è—è –æ–±—â–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —à–∫–æ–ª–∞ ‚Ññ x\" –≥. –ö–∞–ª—É–≥–∏`)", reply_markup=kb.remove)
    await state.set_state(SGOInterface.choosing_school)


async def school(message: Message, state: FSMContext):
    await state.update_data(school=message.text)
    await message.answer(text="–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(SGOInterface.choosing_login)


async def login(message: Message, state: FSMContext):
    await state.update_data(tg_id=message.from_user.id)
    await state.update_data(login=message.text)
    await message.answer(text="–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(SGOInterface.choosing_password)


async def password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    if await collector.data_validator((data['login'], data['password'], data['school'])):
        await message.answer(text="–ê–∫–∫–∞—É–Ω—Ç –î–æ–±–∞–≤–ª–µ–Ωü§©", reply_markup=kb.call_main_menu)
        await state.set_state(SGOInterface.save_to_db)
        # await state.set_state(SGOInterface.main_menu)
    else:
        await message.answer('–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=kb.register)
        await state.clear()


async def approve_data_sgo(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main_menu)
    await state.set_state(SGOInterface.main_menu)


async def call_main_menu(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main_menu)
    await state.set_state(SGOInterface.main_menu)


async def main_menu(message: Message, state: FSMContext, dao: HolderDao):
    data = await get_sgo_user(message.from_user.id, dao.sgo)
    if message.text == "–ë–ª–∏–∂–∞–π—à–µ–µ –î/–∑":
        await message.answer(await collector.homework(data.to_sgo))
    elif message.text == "–û—Ü–µ–Ω–∫–∏ –∑–∞ –¥–µ–Ω—å":
        await message.answer(await collector.marks(data.to_sgo))
    elif message.text == "–û—Ü–µ–Ω–∫–∏ –∑–∞ 7 –¥–Ω–µ–π":
        await message.answer(await collector.period_marks(data.to_sgo))
    elif message.text == "–î–∞–Ω–Ω—ã–µ —à–∫–æ–ª—ã":
        await message.answer(await collector.school(data.to_sgo))
    elif message.text == "–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:", reply_markup=kb.remove)
        await state.set_state(SGOInterface.choosing_school)


def setup_sgo(dp: Dispatcher):
    router = Router(name=__name__)
    router.message.register(registration, Command('register'))
    router.message.register(registration, Text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
    router.message.register(registration, SGOInterface.registration)
    router.message.register(school, SGOInterface.choosing_school)
    router.message.register(login, SGOInterface.choosing_login)
    router.message.register(password, SGOInterface.choosing_password)
    router.message.register(approve_data_sgo, SGOInterface.save_to_db)
    router.message.register(main_menu, SGOInterface.main_menu)
    router.message.register(call_main_menu, Command('menu'))
    router.message.register(call_main_menu, Text("–ú–µ–Ω—é"))

    dp.include_router(router)
