import datetime
from functools import wraps
from netschoolapi import NetSchoolAPI, errors, schemas

from constants import symbols

import netschool


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
def exception_handler(method):
    @wraps(method)
    async def wrapper(self, *method_args, **method_kwargs):
        # try:
        result = await method(self, *method_args, **method_kwargs)
        # except (errors.NetSchoolAPIError):
        #     result = "–û—à–∏–±–∫–∞ –°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µüôÉ"
        # except Exception:
        #     result = "–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º‚ù§Ô∏è‚Äçü©π"
        return result
    return wrapper


def assignment_transformer_homework(assignment):
    return assignment.content if assignment.type == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ" else ""


def lesson_transformer_homework(lesson: schemas.Lesson):
    assignments = list(filter(lambda x: len(x) > 0,
                              map(assignment_transformer_homework, lesson.assignments)))
    dz = '\n–î/–∑: '
    return f"{lesson.number}.{lesson.subject}{dz if len(assignments) > 0 else ''}{' '.join(assignments)}"


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
def get_period_report(schedule: list[schemas.Day]) -> dict:
    result = dict()
    for day in schedule:
        for lesson in day.lessons:
            lesson_marks = []
            for assignment in lesson.assignments:
                if assignment.mark is not None:
                    lesson_marks.append(assignment.mark)
                elif assignment.is_duty:
                    lesson_marks.append(0)
            if len(lesson_marks) > 0:
                result[lesson.subject] = result.get(
                    lesson.subject, []) + lesson_marks
    return result


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç—á–µ—Ç–æ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
def form_period_report(schedule: list[schemas.Day], show_average: bool) -> list[str]:
    data = get_period_report(schedule)
    result = []
    for subject, marks in data.items():
        # result.append(f"{subject}: {''.join(symbols[mark] for mark in marks)}\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(marks)/len(marks)}")
        result.append(
            f"{subject}: {''.join(str(mark) for mark in marks)}")
        if show_average:
            # result[-1] += f"\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(sum(marks)/len(marks), 2)}"
            result[-1] += f"  –°—Ä: {round(sum(marks)/len(marks), 2)}"
    return result

# –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
class netschool_collector():
    def __init__(self):
        self.session = netschool.sgoproc()

    @exception_handler
    async def school(self, lgdata):
        data = await self.session.get_school_data(*lgdata)
        return f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: {data.name}\n" \
               f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {data.director}\n" \
               f"–°–∞–π—Ç: {data.site}\n" \
               f"email: {data.email}\n" \
               f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {data.phone}"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    @exception_handler
    async def homework(self, lgdata, time: datetime.datetime = datetime.datetime.now()):
        data = await self.session.get_next_day(*lgdata, time)
        return f"–£—Ä–æ–∫–∏ –Ω–∞ {datetime.datetime.strftime(data.day, '%d.%m')}:" \
               f"\n" + \
            "\n".join(sorted(map(lesson_transformer_homework, data.lessons)))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å
    @exception_handler
    async def marks(self, lgdata, time: datetime.datetime = datetime.datetime.now()):
        data = await self.session.get_last_day(*lgdata, time)
        result = form_period_report([data])
        if len(result) == 0:
            result.append("–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ üëª")
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {datetime.datetime.strftime(data.day, '%d.%m')}:\n" + "\n".join(result)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
    @exception_handler
    async def period_marks(self, lgdata,
                           start_date: datetime.datetime = datetime.datetime.now(),
                           end_date: datetime.datetime = datetime.datetime.now(),
                           show_average: bool = True):
        data = await self.session.get_period(*lgdata, start_date, end_date)
        result = form_period_report(data, show_average)
        if len(result) == 0:
            result.append("–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ üëª")
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {datetime.datetime.strftime(start_date, '%d.%m')}-{datetime.datetime.strftime(end_date, '%d.%m')}:\n" +\
            '\n'.join(result)
